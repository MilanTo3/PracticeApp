// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20230201091451_newMigr")]
    partial class newMigr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.Property<long>("feedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("feedbackId"));

                    b.Property<bool>("dirtyBasin")
                        .HasColumnType("bit");

                    b.Property<bool>("dirtyBowl")
                        .HasColumnType("bit");

                    b.Property<bool>("dirtyFloor")
                        .HasColumnType("bit");

                    b.Property<bool>("faultyEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("foulSmell")
                        .HasColumnType("bit");

                    b.Property<string>("gradeOverall")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("litterBin")
                        .HasColumnType("bit");

                    b.Property<bool>("noPaper")
                        .HasColumnType("bit");

                    b.Property<bool>("noSoap")
                        .HasColumnType("bit");

                    b.Property<bool>("noTissues")
                        .HasColumnType("bit");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<long>("toiletId")
                        .HasColumnType("bigint");

                    b.Property<bool>("wetFloor")
                        .HasColumnType("bit");

                    b.HasKey("feedbackId");

                    b.HasIndex("toiletId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Models.Toilet", b =>
                {
                    b.Property<long>("toiletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("toiletId"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("toiletId");

                    b.ToTable("Toilet", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<long>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("userId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasAlternateKey("email");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.HasOne("Domain.Models.Toilet", "Toilet")
                        .WithMany("Feedbacks")
                        .HasForeignKey("toiletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toilet");
                });

            modelBuilder.Entity("Domain.Models.Toilet", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
